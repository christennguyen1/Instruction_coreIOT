{
  "title": "Scheduler",
  "image": null,
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "bed11d46-a658-4b20-0a0e-1b991719728f": {
        "type": "latest",
        "sizeX": 11,
        "sizeY": 11,
        "config": {
          "timewindow": {
            "displayValue": "",
            "selectedTab": 0,
            "realtime": {
              "realtimeType": 1,
              "interval": 1000,
              "timewindowMs": 86400000,
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideQuickInterval": false
            },
            "history": {
              "historyType": 0,
              "interval": 1000,
              "timewindowMs": 60000,
              "fixedTimewindow": {
                "startTimeMs": 1693820900298,
                "endTimeMs": 1693907300298
              },
              "quickInterval": "CURRENT_DAY",
              "hideInterval": false,
              "hideLastInterval": false,
              "hideFixedInterval": false,
              "hideQuickInterval": false
            },
            "aggregation": {
              "type": "NONE",
              "limit": 200
            }
          },
          "showTitle": true,
          "backgroundColor": "rgb(255, 255, 255)",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "4px",
          "settings": {
            "enableSearch": true,
            "displayPagination": true,
            "defaultPageSize": 10,
            "defaultSortOrder": "entityName",
            "displayEntityName": true,
            "displayEntityType": false,
            "enableSelectColumnDisplay": false,
            "entitiesTitle": "Sensors",
            "displayEntityLabel": false,
            "entityNameColumnTitle": "Sensor name"
          },
          "title": "Sensors",
          "dropShadow": true,
          "enableFullscreen": false,
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400,
            "padding": "5px 10px 5px 0px"
          },
          "useDashboardTimewindow": false,
          "showLegend": false,
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "deviceId": null,
              "entityAliasId": "9bbc0aef-c4f1-305d-da06-72877b36ecbe",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "active",
                  "type": "attribute",
                  "label": "Active",
                  "color": "#2196f3",
                  "settings": {
                    "columnWidth": "0px",
                    "useCellStyleFunction": true,
                    "useCellContentFunction": true,
                    "cellContentFunction": "value = '&#11044;';\nreturn value;",
                    "cellStyleFunction": "var color;\nif (value === \"true\") {\n    color = 'rgb(39, 134, 34)';\n} else {\n    color = 'rgb(255, 0, 0)';\n}\nreturn {\n    color: color,\n    fontSize: '18px'\n};"
                  },
                  "_hash": 0.9264526512320641
                },
                {
                  "name": "device",
                  "type": "attribute",
                  "label": "device",
                  "color": "#4caf50",
                  "settings": {},
                  "_hash": 0.797831631487024
                },
                {
                  "name": "startTime",
                  "type": "attribute",
                  "label": "startTime",
                  "color": "#f44336",
                  "settings": {},
                  "_hash": 0.13012438268836557
                },
                {
                  "name": "endTime",
                  "type": "attribute",
                  "label": "endTime",
                  "color": "#ffc107",
                  "settings": {},
                  "_hash": 0.4934904068439956
                }
              ],
              "alarmFilterConfig": {
                "statusList": [
                  "ACTIVE"
                ]
              }
            }
          ],
          "showTitleIcon": false,
          "titleIcon": null,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "widgetStyle": {},
          "displayTimewindow": true,
          "actions": {
            "headerButton": [
              {
                "name": "Add",
                "icon": "add",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"\r\n      (ngSubmit)=\"save()\" class=\"add-entity-form\">\r\n  <mat-toolbar color=\"primary\">\r\n    <h2>Add sensor</h2>\r\n    <span class=\"flex-1\"></span>\r\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n      <mat-icon class=\"material-icons\">close</mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\r\n  </mat-progress-bar>\r\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n  <div mat-dialog-content class=\"flex flex-col\">\r\n  \r\n  <mat-form-field class=\"mat-block flex-1\">\r\n      <mat-label>Device Name</mat-label>\r\n      <input matInput formControlName=\"entityName\" required>\r\n      <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">\r\n        Sensor name is required.\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"mat-block flex-1\">\r\n      <mat-label>Device Scheduler</mat-label>\r\n      <input matInput formControlName=\"entityDevice\" required>\r\n      <mat-error *ngIf=\"addEntityFormGroup.get('entityDevice').hasError('required')\">\r\n        Name is required.\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <span class=\"title-modal\">Start</span>\r\n    <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Date</mat-label>\r\n        <mat-datetimepicker-toggle [for]=\"startDatePicker\" matSuffix></mat-datetimepicker-toggle>\r\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #startDatePicker type=\"date\" openOnFocus=\"true\"></mat-datetimepicker>\r\n        <input required matInput formControlName=\"startDate\" [matDatetimepicker]=\"startDatePicker\">\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Time</mat-label>\r\n        <mat-datetimepicker-toggle [for]=\"startTimePicker\" matSuffix></mat-datetimepicker-toggle>\r\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #startTimePicker type=\"time\" openOnFocus=\"true\"></mat-datetimepicker>\r\n        <input required matInput formControlName=\"startTime\" [matDatetimepicker]=\"startTimePicker\">\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <span class=\"title-modal\">End</span>\r\n    <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Date</mat-label>\r\n        <mat-datetimepicker-toggle [for]=\"endDatePicker\" matSuffix></mat-datetimepicker-toggle>\r\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #endDatePicker type=\"date\" openOnFocus=\"true\"></mat-datetimepicker>\r\n        <input required matInput formControlName=\"endDate\" [matDatetimepicker]=\"endDatePicker\">\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Time</mat-label>\r\n        <mat-datetimepicker-toggle [for]=\"endTimePicker\" matSuffix></mat-datetimepicker-toggle>\r\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #endTimePicker type=\"time\" openOnFocus=\"true\"></mat-datetimepicker>\r\n        <input required matInput formControlName=\"endTime\" [matDatetimepicker]=\"endTimePicker\">\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\r\n    <button mat-button color=\"primary\"\r\n            type=\"button\"\r\n            [disabled]=\"(isLoading$ | async)\"\r\n            (click)=\"cancel()\" cdkFocusInitial>\r\n      Cancel\r\n    </button>\r\n    <button mat-button mat-raised-button color=\"primary\"\r\n            type=\"submit\"\r\n            [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">\r\n      Create\r\n    </button>\r\n  </div>\r\n</form>",
                "customCss": ".add-entity-form{\n    width: 300px;\n}\n",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\r\n\r\nopenAddEntityDialog();\r\n\r\nfunction openAddEntityDialog() {\r\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\r\n}\r\n\r\nfunction openAddEntityDialog() {\r\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\r\n}\r\n\r\nfunction AddEntityDialogController(instance) {\r\n    let vm = instance;\r\n    vm.entityId = entityId;\r\n    \r\n\r\n    vm.addEntityFormGroup = vm.fb.group({\r\n        entityName: [{value: 'scheduler', disabled: true}, [vm.validators.required]],\r\n        entityDevice: ['', [vm.validators.required]],\r\n        startDate: ['', [vm.validators.required]],\r\n        startTime: ['', [vm.validators.required]],\r\n        endDate: ['', [vm.validators.required]],\r\n        endTime: ['', [vm.validators.required]],\r\n        attributes: vm.fb.group({\r\n            startTime: [''],\r\n            endTime: ['']\r\n        })\r\n    });\r\n\r\n    // vm.addSchedulerEventFormGroup = vm.fb.group({\r\n    //     entityDevice: ['', [vm.validators.required]]\r\n    // });\r\n\r\n    vm.save = function() {\r\n        if (vm.addEntityFormGroup.valid) {\r\n            vm.addEntityFormGroup.markAsPristine();\r\n            saveEntityObservable().subscribe(\r\n                function (entity) {\r\n                    saveAttributes(entity.id).subscribe(\r\n                        function () {\r\n                            widgetContext.updateAliases();\r\n                            vm.dialogRef.close(null);\r\n                        }\r\n                    );\r\n                }\r\n            );\r\n        }\r\n    };\r\n    \r\n\r\n    vm.cancel = function() {\r\n        vm.dialogRef.close(null);\r\n    };\r\n\r\n    function saveEntityObservable() {\r\n        const formValues = vm.addEntityFormGroup.get('entityName')?.value;\r\n        let entity = {\r\n            name: formValues,\r\n            type: \"Temperature Sensor\"\r\n        };\r\n\r\n        return deviceService.saveDevice(entity);\r\n    }\r\n\r\n    function saveAttributes(entityId) {\r\n        const formValues = vm.addEntityFormGroup.value;\r\n        \r\n        // Function to combine date from one string and time from another\r\n        function combineDateTime(dateString, timeString) {\r\n            const dateObj = new Date(dateString);\r\n            const timeObj = new Date(timeString);\r\n            \r\n            // Extract date components from dateString\r\n            const year = dateObj.getFullYear();\r\n            const month = String(dateObj.getMonth() + 1).padStart(2, '0');\r\n            const day = String(dateObj.getDate()).padStart(2, '0');\r\n            \r\n            // Extract time components from timeString\r\n            const hours = String(timeObj.getHours()).padStart(2, '0');\r\n            const minutes = String(timeObj.getMinutes()).padStart(2, '0');\r\n            const seconds = String(timeObj.getSeconds()).padStart(2, '0');\r\n            \r\n            // Combine date and time\r\n            return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\r\n        }\r\n\r\n        function getTimestamp(dateString, timeString) {\r\n            const dateObj = new Date(dateString);\r\n            const timeObj = new Date(timeString);\r\n            \r\n            // Combine date and time\r\n            const combinedDate = new Date(\r\n                dateObj.getFullYear(), \r\n                dateObj.getMonth(), \r\n                dateObj.getDate(),\r\n                timeObj.getHours(),\r\n                timeObj.getMinutes(),\r\n                timeObj.getSeconds()\r\n            );\r\n            \r\n            // Convert to milliseconds and then to seconds (integer)\r\n            return Math.floor(combinedDate.getTime() / 1000);\r\n        }\r\n        \r\n        // Combine start date and time\r\n        const startDateTime = getTimestamp(formValues.startDate, formValues.startTime);\r\n        \r\n        // Combine end date and time\r\n        const endDateTime = getTimestamp(formValues.endDate, formValues.endTime);\r\n\r\n        let valueTime = {\r\n            'device' : formValues.entityDevice,\r\n            'startTime': startDateTime,\r\n            'endTime': endDateTime\r\n        };\r\n        \r\n        // Chuyển đối tượng valueTime thành chuỗi JSON\r\n        let valueTimeJsonString = JSON.stringify(valueTime);\r\n        \r\n        let attributesArray = [\r\n            {key: \"device\", value: formValues.entityDevice},\r\n            {key: \"startTime\", value: startDateTime},\r\n            {key: \"endTime\", value: endDateTime},\r\n            {key: \"scheduler\", value: valueTimeJsonString}, // Sử dụng chuỗi JSON \r\n        ];\r\n        \r\n        return attributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", attributesArray);\r\n    }\r\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "8ab5a518-67d2-b6a2-956d-81fd512294b2"
              }
            ],
            "actionCellButton": [
              {
                "name": "Edit",
                "icon": "edit",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"\r\n      (ngSubmit)=\"save()\" class=\"add-entity-form\">\r\n  <mat-toolbar color=\"primary\">\r\n    <h2>Add sensor</h2>\r\n    <span class=\"flex-1\"></span>\r\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n      <mat-icon class=\"material-icons\">close</mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\r\n  </mat-progress-bar>\r\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n  <div mat-dialog-content class=\"flex flex-col\">\r\n  \r\n  <mat-form-field class=\"mat-block flex-1\">\r\n      <mat-label>Device Name</mat-label>\r\n      <input matInput formControlName=\"entityName\" required>\r\n      <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">\r\n        Sensor name is required.\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"mat-block flex-1\">\r\n      <mat-label>Device Scheduler</mat-label>\r\n      <input matInput formControlName=\"entityDevice\" required>\r\n      <mat-error *ngIf=\"addEntityFormGroup.get('entityDevice').hasError('required')\">\r\n        Name is required.\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <span class=\"title-modal\">Start</span>\r\n    <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Date</mat-label>\r\n        <mat-datetimepicker-toggle [for]=\"startDatePicker\" matSuffix></mat-datetimepicker-toggle>\r\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #startDatePicker type=\"date\" openOnFocus=\"true\"></mat-datetimepicker>\r\n        <input required matInput formControlName=\"startDate\" [matDatetimepicker]=\"startDatePicker\">\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Time</mat-label>\r\n        <mat-datetimepicker-toggle [for]=\"startTimePicker\" matSuffix></mat-datetimepicker-toggle>\r\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #startTimePicker type=\"time\" openOnFocus=\"true\"></mat-datetimepicker>\r\n        <input required matInput formControlName=\"startTime\" [matDatetimepicker]=\"startTimePicker\">\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <span class=\"title-modal\">End</span>\r\n    <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Date</mat-label>\r\n        <mat-datetimepicker-toggle [for]=\"endDatePicker\" matSuffix></mat-datetimepicker-toggle>\r\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #endDatePicker type=\"date\" openOnFocus=\"true\"></mat-datetimepicker>\r\n        <input required matInput formControlName=\"endDate\" [matDatetimepicker]=\"endDatePicker\">\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Time</mat-label>\r\n        <mat-datetimepicker-toggle [for]=\"endTimePicker\" matSuffix></mat-datetimepicker-toggle>\r\n        <mat-datetimepicker (opened)=\"datePickerOpened()\" #endTimePicker type=\"time\" openOnFocus=\"true\"></mat-datetimepicker>\r\n        <input required matInput formControlName=\"endTime\" [matDatetimepicker]=\"endTimePicker\">\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <div mat-dialog-actions class=\"flex items-center justify-end\">\r\n    <button mat-button color=\"primary\"\r\n            type=\"button\"\r\n            [disabled]=\"(isLoading$ | async)\"\r\n            (click)=\"cancel()\" cdkFocusInitial>\r\n      Cancel\r\n    </button>\r\n    <button mat-button mat-raised-button color=\"primary\"\r\n            type=\"submit\"\r\n            [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">\r\n      Save\r\n    </button>\r\n  </div>\r\n</form>",
                "customCss": ".edit-entity-form{\n    width: 300px;\n}",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\r\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\r\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\r\n\r\nopenAddEntityDialog();\r\n\r\nfunction openAddEntityDialog() {\r\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\r\n}\r\n\r\nfunction openAddEntityDialog() {\r\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\r\n}\r\n\r\nfunction AddEntityDialogController(instance) {\r\n    let vm = instance;\r\n    vm.entityId = entityId;\r\n    \r\n\r\n    vm.addEntityFormGroup = vm.fb.group({\r\n        entityName: [{value: 'scheduler', disabled: true}, [vm.validators.required]],\r\n        entityDevice: ['', [vm.validators.required]],\r\n        startDate: ['', [vm.validators.required]],\r\n        startTime: ['', [vm.validators.required]],\r\n        endDate: ['', [vm.validators.required]],\r\n        endTime: ['', [vm.validators.required]],\r\n        attributes: vm.fb.group({\r\n            startTime: [''],\r\n            endTime: ['']\r\n        })\r\n    });\r\n\r\n    // vm.addSchedulerEventFormGroup = vm.fb.group({\r\n    //     entityDevice: ['', [vm.validators.required]]\r\n    // });\r\n\r\n    // vm.save = function() {\r\n    //     if (vm.addEntityFormGroup.valid) {\r\n    //         vm.addEntityFormGroup.markAsPristine();\r\n    //         saveEntityObservable().subscribe(\r\n    //             function (entity) {\r\n    //                 saveAttributes(entity.id).subscribe(\r\n    //                     function () {\r\n    //                         widgetContext.updateAliases();\r\n    //                         vm.dialogRef.close(null);\r\n    //                     }\r\n    //                 );\r\n    //             }\r\n    //         );\r\n    //     }\r\n    // };\r\n\r\n    vm.save = function() {\r\n        if (vm.addEntityFormGroup.valid) {\r\n            vm.addEntityFormGroup.markAsPristine();\r\n            saveAttributes(entityId).subscribe(\r\n                function () {\r\n                    vm.dialogRef.close(null);\r\n                }\r\n            );\r\n        }\r\n    };\r\n    \r\n\r\n    vm.cancel = function() {\r\n        vm.dialogRef.close(null);\r\n    };\r\n\r\n    function saveAttributes(entityId) {\r\n        const formValues = vm.addEntityFormGroup.value;\r\n        \r\n        // Function to combine date from one string and time from another\r\n        function combineDateTime(dateString, timeString) {\r\n            const dateObj = new Date(dateString);\r\n            const timeObj = new Date(timeString);\r\n            \r\n            // Extract date components from dateString\r\n            const year = dateObj.getFullYear();\r\n            const month = String(dateObj.getMonth() + 1).padStart(2, '0');\r\n            const day = String(dateObj.getDate()).padStart(2, '0');\r\n            \r\n            // Extract time components from timeString\r\n            const hours = String(timeObj.getHours()).padStart(2, '0');\r\n            const minutes = String(timeObj.getMinutes()).padStart(2, '0');\r\n            const seconds = String(timeObj.getSeconds()).padStart(2, '0');\r\n            \r\n            // Combine date and time\r\n            return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\r\n        }\r\n\r\n        function getTimestamp(dateString, timeString) {\r\n            const dateObj = new Date(dateString);\r\n            const timeObj = new Date(timeString);\r\n            \r\n            // Combine date and time\r\n            const combinedDate = new Date(\r\n                dateObj.getFullYear(), \r\n                dateObj.getMonth(), \r\n                dateObj.getDate(),\r\n                timeObj.getHours(),\r\n                timeObj.getMinutes(),\r\n                timeObj.getSeconds()\r\n            );\r\n            \r\n            // Convert to milliseconds and then to seconds (integer)\r\n            return Math.floor(combinedDate.getTime() / 1000);\r\n        }\r\n        \r\n        // Combine start date and time\r\n        const startDateTime = getTimestamp(formValues.startDate, formValues.startTime);\r\n        \r\n        // Combine end date and time\r\n        const endDateTime = getTimestamp(formValues.endDate, formValues.endTime);\r\n\r\n        let valueTime = {\r\n            'device' : formValues.entityDevice,\r\n            'startTime': startDateTime,\r\n            'endTime': endDateTime\r\n        };\r\n        \r\n        // Chuyển đối tượng valueTime thành chuỗi JSON\r\n        let valueTimeJsonString = JSON.stringify(valueTime);\r\n        \r\n        let attributesArray = [\r\n            {key: \"device\", value: formValues.entityDevice},\r\n            {key: \"startTime\", value: startDateTime},\r\n            {key: \"endTime\", value: endDateTime},\r\n            {key: \"scheduler\", value: valueTimeJsonString}, // Sử dụng chuỗi JSON \r\n        ];\r\n        \r\n        return attributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", attributesArray);\r\n    }\r\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "7506576f-87ba-d3a0-88fb-e304d451776d"
              },
              {
                "name": "Delete",
                "icon": "delete",
                "type": "custom",
                "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete sensor \"' +  entityName + '\"';\n    let content = 'Are you sure you want to delete the sensor \"' +\n        entityName + '\"?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n}\n\nfunction deleteEntity() {\n    deviceService.deleteDevice(entityId.id).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the sensor. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}",
                "id": "3488848b-e47d-6af6-659f-5d78369ece5e"
              }
            ],
            "rowClick": [
              {
                "name": "Sensor details",
                "icon": "more_horiz",
                "type": "openDashboardState",
                "targetDashboardStateId": "chart",
                "setEntityId": true,
                "stateEntityParamName": null,
                "openInSeparateDialog": false,
                "dialogTitle": "",
                "dialogHideDashboardToolbar": true,
                "dialogWidth": null,
                "dialogHeight": null,
                "openRightLayout": false,
                "id": "982891b7-c329-0162-fc9c-ad9d920547e1"
              }
            ]
          },
          "enableDataExport": true,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": ""
        },
        "id": "bed11d46-a658-4b20-0a0e-1b991719728f",
        "typeFullFqn": "system.cards.entities_table"
      }
    },
    "states": {
      "default": {
        "name": "Scheduler",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "bed11d46-a658-4b20-0a0e-1b991719728f": {
                "sizeX": 12,
                "sizeY": 6,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "layoutType": "default",
              "backgroundColor": "#eeeeee",
              "columns": 24,
              "margin": 10,
              "outerMargin": true,
              "backgroundSizeMode": "100%"
            }
          }
        }
      }
    },
    "entityAliases": {
      "9bbc0aef-c4f1-305d-da06-72877b36ecbe": {
        "id": "9bbc0aef-c4f1-305d-da06-72877b36ecbe",
        "alias": "Sensors",
        "filter": {
          "type": "deviceType",
          "resolveMultiple": true,
          "deviceTypes": [
            "Temperature Sensor"
          ],
          "deviceNameFilter": ""
        }
      }
    },
    "filters": {},
    "timewindow": {
      "displayValue": "",
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "quickInterval": "CURRENT_DAY",
        "hideInterval": false,
        "hideLastInterval": false,
        "hideQuickInterval": false
      },
      "history": {
        "historyType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "fixedTimewindow": {
          "startTimeMs": 1742967419489,
          "endTimeMs": 1743053819489
        },
        "quickInterval": "CURRENT_DAY",
        "hideInterval": false,
        "hideLastInterval": false,
        "hideFixedInterval": false,
        "hideQuickInterval": false
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": true,
      "showEntitiesSelect": true,
      "showDashboardTimewindow": true,
      "showDashboardExport": true,
      "toolbarAlwaysOpen": true
    }
  },
  "name": "Scheduler",
  "resources": []
}